"use client"

import { useState, useEffect } from "react"
import { useSearchParams } from "next/navigation"
import Image from "next/image"
import Link from "next/link"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Calendar, Tag, ArrowLeft } from "lucide-react"

export default function BlogContent() {
  const searchParams = useSearchParams()
  const [selectedCategory, setSelectedCategory] = useState("all")

  useEffect(() => {
    const category = searchParams.get("category")
    if (category) {
      setSelectedCategory(category)
    }
  }, [searchParams])

  const blogPosts = [
    {
      id: 1,
      title: "Ng√†y ƒë·∫ßu ti√™n Long v·ªÅ nh√†",
      excerpt:
        "C√¢u chuy·ªán v·ªÅ ng√†y ƒë·∫ßu ti√™n ch√∫ m√®o nh·ªè b√© ƒë·∫øn v·ªõi gia ƒë√¨nh ch√∫ng t√¥i. T·ª´ s·ª± ng·∫°i ng√πng ban ƒë·∫ßu ƒë·∫øn nh·ªØng kho·∫£nh kh·∫Øc ƒë√°ng y√™u...",
      image: "/placeholder.svg?height=250&width=400",
      date: "15 Th√°ng 1, 2024",
      category: "ky-niem",
      categoryLabel: "K·ª∑ ni·ªám",
      readTime: "5 ph√∫t ƒë·ªçc",
    },
    {
      id: 2,
      title: "Nh·ªØng tr√≤ ngh·ªãch ng·ª£m c·ªßa Long",
      excerpt: "H√¥m nay Long l·∫°i l√†m m·ªôt tr√≤ ngh·ªãch ng·ª£m khi·∫øn c·∫£ nh√† c∆∞·ªùi kh√¥ng ng·ª´ng. Ch√∫ b√© ƒë√£ l√†m g√¨ th·∫ø nh·ªâ?",
      image: "/placeholder.svg?height=250&width=400",
      date: "10 Th√°ng 1, 2024",
      category: "hai-huoc",
      categoryLabel: "H√†i h∆∞·ªõc",
      readTime: "3 ph√∫t ƒë·ªçc",
    },
    {
      id: 3,
      title: "Long v√† m√≥n ƒë·ªì ch∆°i y√™u th√≠ch",
      excerpt: "Kh√°m ph√° nh·ªØng m√≥n ƒë·ªì ch∆°i m√† Long y√™u th√≠ch nh·∫•t v√† c√°ch ch√∫ng t√¥i ch·ªçn ƒë·ªì ch∆°i ph√π h·ª£p cho m√®o c∆∞ng.",
      image: "/placeholder.svg?height=250&width=400",
      date: "5 Th√°ng 1, 2024",
      category: "do-choi",
      categoryLabel: "ƒê·ªì ch∆°i",
      readTime: "4 ph√∫t ƒë·ªçc",
    },
    {
      id: 4,
      title: "B·ªØa ƒÉn ngon c·ªßa Long",
      excerpt: "Chia s·∫ª th·ª±c ƒë∆°n h√†ng ng√†y c·ªßa Long v√† nh·ªØng m√≥n ƒÉn m√† ch√∫ b√© y√™u th√≠ch nh·∫•t.",
      image: "/placeholder.svg?height=250&width=400",
      date: "1 Th√°ng 1, 2024",
      category: "an-uong",
      categoryLabel: "ƒÇn u·ªëng",
      readTime: "6 ph√∫t ƒë·ªçc",
    },
    {
      id: 5,
      title: "Long h·ªçc c√°ch s·ª≠ d·ª•ng c√¢y c√†o",
      excerpt: "Qu√° tr√¨nh hu·∫•n luy·ªán Long s·ª≠ d·ª•ng c√¢y c√†o v√† nh·ªØng b√†i h·ªçc th√∫ v·ªã trong vi·ªác chƒÉm s√≥c m√®o.",
      image: "/placeholder.svg?height=250&width=400",
      date: "28 Th√°ng 12, 2023",
      category: "huan-luyen",
      categoryLabel: "Hu·∫•n luy·ªán",
      readTime: "7 ph√∫t ƒë·ªçc",
    },
    {
      id: 6,
      title: "Gi·∫•c ng·ªß ƒë√°ng y√™u c·ªßa Long",
      excerpt: "Nh·ªØng t∆∞ th·∫ø ng·ªß si√™u ƒë√°ng y√™u c·ªßa Long v√† c√¢u chuy·ªán v·ªÅ gi·∫•c ng·ªß c·ªßa m√®o c∆∞ng.",
      image: "/placeholder.svg?height=250&width=400",
      date: "25 Th√°ng 12, 2023",
      category: "doi-song",
      categoryLabel: "ƒê·ªùi s·ªëng",
      readTime: "4 ph√∫t ƒë·ªçc",
    },
  ]

  const categories = [
    { id: "all", label: "T·∫•t c·∫£", count: blogPosts.length },
    { id: "ky-niem", label: "K·ª∑ ni·ªám", count: blogPosts.filter((p) => p.category === "ky-niem").length },
    { id: "hai-huoc", label: "H√†i h∆∞·ªõc", count: blogPosts.filter((p) => p.category === "hai-huoc").length },
    { id: "do-choi", label: "ƒê·ªì ch∆°i", count: blogPosts.filter((p) => p.category === "do-choi").length },
    { id: "an-uong", label: "ƒÇn u·ªëng", count: blogPosts.filter((p) => p.category === "an-uong").length },
    { id: "huan-luyen", label: "Hu·∫•n luy·ªán", count: blogPosts.filter((p) => p.category === "huan-luyen").length },
    { id: "doi-song", label: "ƒê·ªùi s·ªëng", count: blogPosts.filter((p) => p.category === "doi-song").length },
  ]

  const filteredPosts =
    selectedCategory === "all" ? blogPosts : blogPosts.filter((post) => post.category === selectedCategory)

  return (
    <div className="min-h-screen bg-gradient-to-b from-orange-50 to-pink-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="container mx-auto px-4 py-4">
          <nav className="flex items-center justify-between">
            <Link href="/" className="flex items-center space-x-2">
              <ArrowLeft className="h-5 w-5 text-gray-600" />
              <div className="w-10 h-10 bg-orange-500 rounded-full flex items-center justify-center">
                <span className="text-white text-xl">üê±</span>
              </div>
              <h1 className="text-2xl font-bold text-gray-800">Blog c·ªßa Long</h1>
            </Link>
          </nav>
        </div>
      </header>

      {/* Hero Section */}
      <section className="py-16 px-4 bg-gradient-to-r from-orange-500 to-pink-500 text-white">
        <div className="container mx-auto text-center">
          <h1 className="text-5xl font-bold mb-4">T·∫•t c·∫£ c√¢u chuy·ªán c·ªßa Long</h1>
          <p className="text-xl opacity-90">Kh√°m ph√° nh·ªØng kho·∫£nh kh·∫Øc ƒë√°ng y√™u v√† c√¢u chuy·ªán th√∫ v·ªã</p>
        </div>
      </section>

      {/* Categories Filter */}
      <section className="py-8 px-4 bg-white border-b">
        <div className="container mx-auto">
          <div className="flex flex-wrap gap-2 justify-center">
            {categories.map((category) => (
              <Button
                key={category.id}
                variant={selectedCategory === category.id ? "default" : "outline"}
                className={
                  selectedCategory === category.id
                    ? "bg-orange-500 hover:bg-orange-600"
                    : "border-orange-200 text-gray-600 hover:bg-orange-50"
                }
                onClick={() => setSelectedCategory(category.id)}
              >
                <Tag className="mr-2 h-4 w-4" />
                {category.label} ({category.count})
              </Button>
            ))}
          </div>
        </div>
      </section>

      {/* Blog Posts Grid */}
      <section className="py-16 px-4">
        <div className="container mx-auto">
          {filteredPosts.length > 0 ? (
            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
              {filteredPosts.map((post) => (
                <Card
                  key={post.id}
                  className="overflow-hidden hover:shadow-xl transition-all duration-300 hover:-translate-y-1"
                >
                  <div className="relative">
                    <Image
                      src={post.image || "/placeholder.svg"}
                      alt={post.title}
                      width={400}
                      height={250}
                      className="w-full h-48 object-cover"
                    />
                    <div className="absolute top-4 left-4">
                      <span className="bg-orange-500 text-white px-3 py-1 rounded-full text-sm font-medium">
                        {post.categoryLabel}
                      </span>
                    </div>
                  </div>
                  <CardHeader>
                    <CardTitle className="text-xl hover:text-orange-500 transition-colors">
                      <Link href={`/blog/${post.id}`}>{post.title}</Link>
                    </CardTitle>
                    <div className="flex items-center text-gray-500 text-sm space-x-4">
                      <div className="flex items-center">
                        <Calendar className="mr-1 h-4 w-4" />
                        {post.date}
                      </div>
                      <span>{post.readTime}</span>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <p className="text-gray-600 mb-4 line-clamp-3">{post.excerpt}</p>
                    <Link
                      href={`/blog/${post.id}`}
                      className="text-orange-500 hover:text-orange-600 font-medium inline-flex items-center group"
                    >
                      ƒê·ªçc ti·∫øp
                      <span className="ml-1 group-hover:translate-x-1 transition-transform">‚Üí</span>
                    </Link>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <div className="text-center py-20">
              <div className="text-6xl mb-4">üòø</div>
              <h3 className="text-2xl font-bold text-gray-800 mb-2">Ch∆∞a c√≥ b√†i vi·∫øt n√†o</h3>
              <p className="text-gray-600">Danh m·ª•c n√†y ch∆∞a c√≥ c√¢u chuy·ªán n√†o c·ªßa Long</p>
            </div>
          )}
        </div>
      </section>

      {/* Load More */}
      {filteredPosts.length > 0 && (
        <section className="py-8 px-4 text-center">
          <Button
            size="lg"
            variant="outline"
            className="border-orange-500 text-orange-500 hover:bg-orange-50 bg-transparent"
          >
            T·∫£i th√™m b√†i vi·∫øt
          </Button>
        </section>
      )}
    </div>
  )
}
